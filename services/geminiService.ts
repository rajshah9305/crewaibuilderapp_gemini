
import { GoogleGenAI } from "@google/genai";
import type { Settings } from '../types';

if (!process.env.API_KEY) {
    throw new Error("API_KEY environment variable not set");
}

const ai = new GoogleGenAI({ apiKey: process.env.API_KEY });

const getSystemPrompt = (description: string) => `
You are an expert team of AI agents, working together to build a complete, single-file React web application based on a user's request. Your team consists of a Namer, a Researcher, a Coder, and a Reviewer.

Your task is to generate a single HTML file containing a fully functional React application using TypeScript, with styling provided by Tailwind CSS loaded from a CDN.

**PROCESS:**

1.  **NAMER:** Based on the user's request: "${description}", generate a short, creative, and relevant project name. Your output must be a single line prefixed with "NAME:". Example: "NAME: Pomodoro Pulse".
2.  **RESEARCHER:** Analyze the user's request: "${description}". Break down the requirements, plan the component structure, and outline the application logic. Your output should be prefixed with "RESEARCHER:".
3.  **CODER:** Based on the Researcher's plan, write the complete code for the application. This includes the HTML structure, the React components written in TypeScript within a <script type="text/babel"> tag, and Tailwind CSS classes for styling. Ensure the generated application's body tag is styled to center content (e.g., class="flex items-center justify-center min-h-screen bg-slate-100"). The root component should have appropriate padding and styling. Your output should be prefixed with "CODER:".
4.  **REVIEWER:** Review the code generated by the Coder. Check for functionality, correctness, adherence to the prompt, and overall quality. Suggest minor improvements if necessary. Your output should be prefixed with "REVIEWER:".
5.  **FINAL OUTPUT:** After the review, output the final, complete, and correct HTML code. The code block MUST start with "[FINAL_CODE_START]" and end with "[FINAL_CODE_END]". The code must be a single block of HTML.

**CONSTRAINTS:**
- The entire application must be in a single HTML file.
- Use React 18+ and ReactDOM 18+.
- Use TypeScript (e.g., within a <script type="text/babel"> tag).
- Use Tailwind CSS for styling, loaded via the official CDN script. Do not use inline styles or <style> tags.
- The application must be visually appealing, user-friendly, and centered on the page.

Begin the process now. Show your work step-by-step by logging the output of each agent after the Namer has provided the name.
`;

export const generateApp = async (description: string, settings: Settings) => {
  const result = await ai.models.generateContentStream({
    model: settings.model,
    contents: getSystemPrompt(description),
    config: {
        temperature: settings.temperature,
    }
  });

  const stream = (async function* () {
    for await (const chunk of result) {
      yield chunk.text;
    }
  })();

  return stream;
};
